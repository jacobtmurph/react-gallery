{"version":3,"sources":["components/Nav.js","components/Header.js","components/Image.js","components/Gallery.js","components/ResultPage.js","components/404.js","App.js","config.js","serviceWorker.js","index.js"],"names":["Nav","props","react_default","a","createElement","className","Link","to","Header","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getSearchWords","e","setState","searchWord","target","value","state","_this2","id","title","onSubmit","history","push","concat","type","onChange","placeholder","components_Nav","Component","withRouter","Image","src","alt","Gallery","match","images","pics","map","image","components_Image","farm","server","secret","key","searchTag","length","ResultPage","getTags","_len","arguments","queries","Array","_key","reduce","count","tag","tagString","performSearch","_len2","_key2","tags","fetch","flickrKey","then","response","json","responseData","flickr","photos","photo","loading","catch","error","console","log","params","components_Header","components_Gallery","NotFound","href","appKey","App","HashRouter","Switch","Route","exact","path","render","components_ResultPage","component","Boolean","window","location","hostname","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7f9a5149.chunk.js","sourcesContent":["import React from 'react';\nimport {Link} from 'react-router-dom';\n\nconst Nav = (props) => {\n    return (\n        <div className=\"main-nav\">\n            {/* Link to common search queries */}\n            <ul>\n              <li><Link to=\"/search/city\">City</Link></li>\n              <li><Link to=\"/search/forest\"> Forests </Link></li>\n              <li><Link to=\"/search/mural\">Murals</Link></li>\n            </ul>\n          </div>\n    )\n};\n// Export the Navigation menu\nexport default Nav;","import React, {Component} from 'react';\nimport {withRouter} from 'react-router-dom';\nimport Nav from './Nav';\n\n\nclass Header extends Component {\n    //Set the state for the searchWord\n    constructor(props) {\n        super(props);\n        this.state = {\n            searchWord: \"\",\n        }\n    }\n\n    //Retrive & set the searchWord state as input is being typed.\n    getSearchWords = e => {\n        this.setState({searchWord: e.target.value});\n    };\n\n    //Returned JSX\n    render() {\n        return (\n            <div id=\"header\">\n                {/* Display the page title */}\n                <h1>{ this.props.title }</h1>\n                {/* Search form, redirects to a new ResultPage with search when submitted */}\n                <form className=\"search-form\" onSubmit={ () => this.props.history.push(`/search/${this.state.searchWord}/`)}>\n                    {/* Input box that catches search query via the getSearchWords function */}\n                    <input className=\"search-box\" type=\"search\" onChange={this.getSearchWords} placeholder=\"Search\"/>\n                    <button type=\"submit\">Search</button>\n                </form>\n                {/* Nav Element */}\n                < Nav />\n            </div>\n        )\n    }\n};\n\n// Export the Header with access to the Router's history object.\nexport default withRouter(Header);","import React from 'react';\n\nconst Image = props => {\n   return( \n        <li>\n            {/* Create an image for the Gallery ul, with dynamic srcs.  */}\n            <img src={props.src} alt=\"\"/>\n        </li>\n   )\n}\n\nexport default Image; ","import React from 'react';\nimport Image from './Image';\n\nconst Gallery = (props, match) => {\n    //Add the retrived images from the ResultPage to the results variable\n    const results = props.pics;\n    //Turn each image into it's own Image element in the array.\n    let images = results.map(image =>  \n        <Image src={`https://farm${image.farm}.staticflickr.com/${image.server}/${image.id}_${image.secret}.jpg`} key={image.id} alt=\"\" />\n    );\n\n    //Returned JSX\n    return (\n        <div className=\"photo-container\">\n            {/* If there's been a search */}\n            {\n                (props.searchTag)\n                // Display a title showing the searched word\n                ?<h2>{props.searchTag} Images</h2>\n                // Else, display a general header\n                :<h2>Images</h2>\n            }\n            {/* If there are images */}\n            {\n                (images.length > 0)\n                // Display them\n                ?<ul>\n                    { images }\n                </ul>\n                // Else, tell the user that no images were found\n                :<p>No images found for this search</p>\n            }\n            \n        </div>\n    )\n\n};\n\n//Export the Gallery\nexport default Gallery;","import React, {Component} from 'react';\nimport {withRouter} from 'react-router-dom';\nimport Header from './Header';\nimport Gallery from './Gallery';\n\n\nclass ResultPage extends Component {\n  //Set the inital state for the image container, and loading condition\n    constructor(props) {\n      super(props);\n      this.state = {\n        flickr: [],\n        loading: true\n      }\n    }\n  //When the Result Page mounts\n  componentDidMount() {\n        //If there is has been a search requested\n        if (this.props.match.params.tag) {\n            //Search for images tagged with the keyword\n            this.performSearch(`${this.props.match.params.tag}`);\n        } else {\n          //Get all images from the Belfast GeoLocation\n          this.performSearch(\"\");\n        }\n    }\n\n    //If the component updates, i.e. through NavLinks\n    componentDidUpdate () {\n         //If there is has been a search requested\n         if (this.props.match.params.tag) {\n          //Search for images tagged with the keyword\n          this.performSearch(`${this.props.match.params.tag}`);\n         } else {\n            //Get all images from the Belfast GeoLocation\n            this.performSearch(\"\");\n          }\n    }\n    //If multiple keywords are searched\n    getTags = (...queries) => {\n      //Format each keyword into an indiviual urltag\n      let tags = queries.reduce((count, tag) => {\n        let tagString = \"\";\n        if (count === 0) {\n          tagString += `${tag}`;\n          count += 1;\n        } else {\n          tagString += `%2C+${tag}`;\n          count += 1;\n        }\n        //Return the string of search tags\n        return tagString\n      }, 0)\n\n      return tags;\n    };\n\n    //When a search is requested\n    performSearch = (...queries) => {\n      //Get the tag string\n      let tags = this.getTags(queries);\n      //Fetch and pass the images to the flickr state\n      fetch(`https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=${this.props.flickrKey}&tags=Belfast%2C+${tags}&per_page=24&format=json&nojsoncallback=1`).then( response => response.json())\n        .then( responseData => this.setState({flickr: responseData.photos.photo, loading: false }) )\n        //If an error occurs during the fetch\n        .catch(error => {\n            //Log the error in a user-friendly way to the console.\n            console.log(\"Error occured when fetching and/or parsing data\", error);\n        });\n    };\n\n      //Rendered JSX\n      render() {\n        return (\n            <div>\n            <Header title=\"Belfast Photographic Library\" />\n            {/* If loading */}\n            {\n              (this.state.loading)\n              // Display a loading tag\n              ? <span>Loading...</span>\n              //Else, display the gallery with the images and search word for header\n              :<Gallery pics={this.state.flickr} searchTag={this.props.match.params.tag}/>\n            } \n          </div>\n        )\n      };\n};\n\n// Export the ResultPage with access to the Routers match object.\nexport default withRouter(ResultPage);","import React from 'react';\n\nconst NotFound = () => {\n    return (\n        <div>\n            <h1>404 Not Found</h1>\n            <h3>The page you were looking for doesn't exist</h3>\n            <p><a href=\"/\">Click here to return to the Home Page.</a></p>\n        </div>\n    )\n};\n\nexport default NotFound;","import React from 'react';\nimport {HashRouter, Route, Switch} from 'react-router-dom';\nimport ResultPage from './components/ResultPage';\nimport Header from './components/Header';\nimport NotFound from './components/404';\n//Get the apiKey for the FlickrAPI\nimport apiKey from './config';\n\nconst appKey = apiKey;\n\nconst App = () =>  {  \n    return (\n      <HashRouter>\n        <div className=\"container\">\n          {/* If Routes are available, display them with necessary data */}\n            <Switch>\n              <Route exact path=\"/\" render={() => <ResultPage flickrKey={appKey}/>} />\n              <Route exact path=\"/search\" render={() => <Header title=\"Belfast Photographic Library: Search\"/>} />\n              <Route exact path=\"/search/:tag\" render={() => <ResultPage flickrKey={appKey} />} />\n              {/* Else, display a 404 page */}\n              <Route component={NotFound} />\n            </Switch>\n        </div>\n      </HashRouter>\n    );\n};\n\n// Export the App\nexport default App;","const apiKey = \"5561c590f57da8ef2f683251a96310d0\";\n\nexport default apiKey;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}